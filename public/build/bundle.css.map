{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Aircraft.svelte",
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {maxBy, minBy} from \"./utils\";\n    import {min} from 'd3'\n\n    export let name;\n    export let performanceData;\n    export let passengers;\n    export let cruiseProfile;\n\n    $: maxEcon = minBy(performanceData, 'Speed')\n    $: maxCruise = maxBy(performanceData, 'Speed')\n    $: interpolatedSpeed = interpolateSpeed(maxEcon, maxCruise, cruiseProfile)\n    $: interpolatedSmpg = interpolateEfficiency(maxEcon, maxCruise, cruiseProfile, passengers)\n\n\n    function interpolateSpeed(econ, fast, profile) {\n        if (!profile) {\n            return\n        }\n        return econ.Speed + ((fast.Speed - econ.Speed) * profile / 100);\n    }\n\n\n    function interpolateEfficiency(econ, fast, profile, passg) {\n        if (!profile || typeof passg === 'undefined') {\n            return\n        }\n        let minSeats = min([econ.Seats, econ['400NMSeats']]);\n        let seatFactor = (passg === Number.POSITIVE_INFINITY) ? minSeats : min([minSeats, (passg + 1)]);\n        return (econ.MPG * seatFactor) + (((fast.MPG - econ.MPG) * profile / 100) * seatFactor);\n    }\n\n    function roundNumber(num, dec) {\n        return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n    }\n</script>\n<style>\n    .row {\n        margin-top: 4px;\n        font-family: \"Courier New\", Courier, fixed-width;\n    }\n    .highlight {\n        font-weight: 800;\n    }\n</style>\n<div class=\"row mb-4\">\n    <h3>{name}</h3>\n    {#if passengers > 0}\n        <div class=\"highlight mb-2\">{passengers === Number.POSITIVE_INFINITY ?  min([maxEcon.Seats, maxEcon['400NMSeats']]) : passengers} passengers @ {roundNumber(interpolatedSpeed, 0)} kts: {roundNumber(interpolatedSmpg, 1)} SMPG</div>\n    {:else}\n        <div class=\"highlight mb-2\">Solo @ {roundNumber(interpolatedSpeed, 0)} kts: {roundNumber(interpolatedSmpg, 1)} MPG</div>\n    {/if}\n    <div>400-NM Seats: {min([performanceData[0][\"400NMSeats\"], performanceData[0][\"Seats\"]])}</div>\n    <div>Econ cruise: {maxEcon.Speed} kts,  {maxEcon.Burn} gph @ {maxEcon.Altitude ? maxEcon.Altitude + ' ft' : '-' } <a href={maxEcon.Source}>(source)</a></div>\n    <div>Max cruise: {maxCruise.Speed} kts, {maxCruise.Burn} gph @ {maxCruise.Altitude ? maxCruise.Altitude + ' ft' : '-' } <a href={maxCruise.Source}>(source)</a></div>\n</div>",
    "<script>\n    import {csv, autoType, scaleLinear, min, max, select, axisBottom, axisLeft, transition, group} from 'd3';\n    import {onMount} from 'svelte';\n    import {types} from './types';\n    import Aircraft from \"./Aircraft.svelte\";\n    import {maxBy, minBy} from \"./utils\";\n\n    let rows = [];\n    const TYPE_ALL = 'all';\n    let type = TYPE_ALL;\n    $: description = types[type] ? types[type].description : '';\n    let loading = true;\n    let headline = \"Loading\";\n    let svg;\n    let circles;\n    let x;\n    let y;\n    let highlighted;\n    let passengers = Number.POSITIVE_INFINITY;\n    let cruiseProfile = 1;\n\n    function interpolateSpeed(d) {\n        let least = minBy(d.value, \"Speed\")\n        let most = maxBy(d.value, \"Speed\")\n        let interpolated = least.Speed + ((most.Speed - least.Speed) * cruiseProfile / 100);\n        return x(interpolated)\n    }\n\n\n    function interpolateEfficiency(d) {\n        let least = minBy(d.value, \"Speed\")\n        let most = maxBy(d.value, \"Speed\")\n        let minSeats = min([d.value[0].Seats, d.value[0]['400NMSeats']]);\n        let seatFactor = (passengers === Number.POSITIVE_INFINITY) ? minSeats :  passengers + 1;\n        let interpolated = (least.MPG * seatFactor) + (((most.MPG - least.MPG) * cruiseProfile / 100) * seatFactor);\n        return y(interpolated)\n    }\n\n    let margin = {\n        top: 5,\n        bottom: 45,\n        left: 45,\n        right: 5\n    };\n\n    let radius = 7;\n\n    function random(list) {\n        return list[Math.floor((Math.random() * list.length))];\n    }\n\n    $: filteredRows = reFilterRows(rows, type, passengers);\n\n    $: {\n        if (svg && filteredRows && cruiseProfile) {\n\n            const slow = transition()\n                .duration(1000);\n\n            svg.selectAll('circle')\n                .data(filteredRows)\n                .join(\n                    enter => enter.append('circle')\n                        .attr('opacity', 0)\n                        .attr('r', radius)\n                        .attr('fill', d => types[d.value[0].Type].color)\n                        .attr('cx', interpolateSpeed)\n                        .attr('cy', interpolateEfficiency)\n                        .style('cursor', 'pointer')\n                        .call(e => e.transition(slow).attr('opacity', 1)),\n                    update => update\n                        .call(e => e.transition(slow)\n                            .attr('fill', d => {\n                                return types[d.value[0].Type].color;\n                            })\n                            .attr('cx', interpolateSpeed)\n                            .attr('cy', interpolateEfficiency)\n                        ),\n                    remove => remove\n                        .call(e => e.transition(slow).attr('opacity', 0))\n                        .remove()\n                )\n                .on('click', e => { highlighted = e.target[\"__data__\"] })\n        }\n    }\n\n    function reFilterRows(sourceRows, typeString, passengerCount) {\n        let filtered = sourceRows.filter(r => {\n            let allowed = true\n            let minSeats = min([r.value[0].Seats, r.value[0]['400NMSeats']])\n            if (typeString !== TYPE_ALL && r.value[0].Type !== type) {\n                allowed = false\n            } else if (passengers !== Number.POSITIVE_INFINITY && minSeats < passengerCount + 1) {\n                allowed = false\n            }\n            if (!allowed && r === highlighted) {\n                highlighted = undefined;\n            }\n            return allowed\n        });\n        return filtered\n    }\n\n    onMount(() => {\n        let box = document.getElementById('js-svg-container');\n        let boxWidth = Math.round(box.offsetWidth - 2);\n        let width = boxWidth - margin.left - margin.right - radius * 2;\n        let height = Math.round(width * .61 - radius * 2);\n\n        csv('aircraft_data.csv', autoType).then(data => {\n\n            let speeds = data.map(d => d.Speed);\n            let smpg = data.map(d => d.SMPG);\n            let mpg = data.map(d => d.MPG);\n\n            let grouped = Array.from(group(data, d => d.Airplane), ([key, value]) => ({key, value}))\n\n            // define x and y scale functions\n            x = scaleLinear()\n                .domain([min(speeds), max(speeds)])\n                .range([margin.left + radius, boxWidth - margin.right - radius]);\n\n            y = scaleLinear()\n                .domain([max(smpg), min(mpg)])\n                .range([margin.top + radius, height - margin.bottom - radius]);\n\n            svg = select('#js-svg-container')\n                .append('svg')\n                .attr('height', height)\n                .attr('width', boxWidth);\n\n            // x axis\n            let scaleXAxis = axisBottom()\n                .scale(x);\n\n            svg.append(\"g\")\n                .attr('transform', 'translate(0,' + (height - margin.bottom) + ')')\n                .call(scaleXAxis);\n\n            svg.append('text')\n                .attr('x', margin.left + width / 2)\n                .attr('y', height - 3)\n                .attr('text-anchor', 'middle')\n                .text('Speed (kts)')\n                .attr('fill', '#444444');\n\n            let scaleYAxis = axisLeft()\n                .scale(y);\n\n            // y axis\n            svg.append(\"g\")\n                .attr('transform', 'translate(' + margin.left + ', 0)')\n                .call(scaleYAxis);\n\n            svg.append('text')\n                .attr('x', 12)\n                .attr('y', height / 2)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(-90, 12, ' + height / 2 + ')')\n                .text('Seat-miles / gallon')\n                .attr('fill', '#444444');\n\n\n            headline = 'Fuel Efficiency for Owner-flown Aircraft';\n            rows = grouped;\n            loading = false;\n        });\n    })\n</script>\n<style>\n    h1 {\n        color: #123456;\n    }\n    .container {\n        max-width: 600px;\n        margin: 0 auto 200px auto;\n    }\n    input {\n        padding: 0;\n        margin: 0;\n    }\n</style>\n<div class=\"container\">\n    <h1>{headline}</h1>\n    <label class=\"mb-2\">\n        Engine type:\n        <select bind:value={type}>\n            <option value={TYPE_ALL}>Show all</option>\n            {#each Object.keys(types) as id}\n                <option value={id}>{types[id].name}</option>\n            {/each}\n        </select>\n    </label>\n    <label class=\"mb-2\">\n        Passengers:\n        <select bind:value={passengers}>\n            <option value={0}>Solo</option>\n            {#each [1,2,3,4,5,6,7,8] as p}\n                <option value={p}>{p}</option>\n            {/each}\n            <option value={Number.POSITIVE_INFINITY}>Capacity</option>\n        </select>\n    </label>\n    <label class=\"mb-2\">\n        Max range <input type=\"range\" min=\"1\" max=\"100\" bind:value={cruiseProfile} /> Max speed\n    </label>\n    <div id=\"js-svg-container\"></div>\n    {#if highlighted}\n        <Aircraft name={highlighted.key} performanceData={highlighted.value} {passengers} {cruiseProfile} />\n    {:else}\n        <div class=\"mb-4\">click any data point to see aircraft and stats</div>\n    {/if}\n    <div class=\"mb-4\"><a href=\"aircraft_data.csv\">download all source data</a></div>\n    <div><a href=\"https://github.com/natevaughan/flying-slow\">see source code</a></div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAqCI,IAAI,eAAC,CAAC,AACF,UAAU,CAAE,GAAG,CACf,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,AACpD,CAAC,AACD,UAAU,eAAC,CAAC,AACR,WAAW,CAAE,GAAG,AACpB,CAAC;AC+HD,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,OAAO,AAClB,CAAC,AACD,UAAU,cAAC,CAAC,AACR,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,AAC7B,CAAC,AACD,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACb,CAAC"
}